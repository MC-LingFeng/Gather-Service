/*
 * ESLint的JSON文件是允许JavaScript注释的，但在gist里显示效果不好，所以我把.json文件后缀改为了.js
 */

/*
 * ESLint 配置文件优先级：
 * .eslintrc.js(输出一个配置对象)
 * .eslintrc.yaml
 * .eslintrc.yml
 * .eslintrc.json（ESLint的JSON文件允许JavaScript风格的注释）
 * .eslintrc（可以是JSON也可以是YAML）
 *  package.json（在package.json里创建一个eslintConfig属性，在那里定义你的配置）
 */

/*
 * 你可以通过在项目根目录创建一个.eslintignore文件告诉ESLint去忽略特定的文件和目录
 * .eslintignore文件是一个纯文本文件，其中的每一行都是一个glob模式表明哪些路径应该忽略检测
 */

 {
    //ESLint默认使用Espree作为其解析器
    //同时babel-eslint也是用得最多的解析器
    "parser": "@typescript-eslint/parser",
  
    //parser解析代码时的参数
    "parserOptions": {
      //指定要使用的ECMAScript版本，默认值5

      "ecmaVersion": "latest",
      "project": ["./tsconfig.json"],
      //设置为script(默认)或module（如果你的代码是ECMAScript模块)
      "sourceType": "module",
      //这是个对象，表示你想使用的额外的语言特性,所有选项默认都是false
      "ecmafeatures": {
        //允许在全局作用域下使用return语句
        "globalReturn": true,
        //启用全局strict模式（严格模式）
        "impliedStrict": true,
        //启用JSX
        "jsx": false,
        //启用对实验性的objectRest/spreadProperties的支持
        "experimentalObjectRestSpread": false
      }
    },
  
    //指定环境，每个环境都有自己预定义的全局变量，可以同时指定多个环境，不矛盾
    "env": {
      //效果同配置项ecmaVersion一样
      "browser": true,
      "es2021": true,
      "es6": true,
      "node": true,
      "commonjs": false,
      "mocha": true,
      "jquery": true
    //    //如果你想使用来自某个插件的环境时，确保在plugins数组里指定插件名
    //    //格式为：插件名/环境名称（插件名不带前缀）
    //   "react/node": true
    },
  
    //指定环境为我们提供了预置的全局变量
    //对于那些我们自定义的全局变量，可以用globals指定
    //设置每个变量等于true允许变量被重写，或false不允许被重写
    "globals": {
      "globalVar1": true,
      "globalVar2": false
    },
  
    //ESLint支持使用第三方插件
    //在使用插件之前，你必须使用npm安装它
    //全局安装的ESLint只能使用全局安装的插件
    //本地安装的ESLint不仅可以使用本地安装的插件还可以使用全局安装的插件
    //plugin与extend的区别：extend提供的是eslint现有规则的一系列预设
    //而plugin则提供了除预设之外的自定义规则，当你在eslint的规则里找不到合适的的时候
    //就可以借用插件来实现了
    "plugins": [
      // "eslint-plugin-airbnb"
    ],
  
    //具体规则配置
    //off或0--关闭规则
    //warn或1--开启规则，警告级别(不会导致程序退出)
    //error或2--开启规则，错误级别(当被触发的时候，程序会退出)
    "rules": {
        "accessor-pairs": 2,
        "arrow-spacing": [2, {
          "before": true,
          "after": true
        }],
        "block-spacing": [2, "always"],
        "brace-style": [2, "1tbs", {
          "allowSingleLine": true
        }],
        "camelcase": [0, {
          "properties": "always"
        }],
        "comma-dangle": [2, "never"],
        "comma-spacing": [2, {
          "before": false,
          "after": true
        }],
        "comma-style": [2, "last"],
        "constructor-super": 2,
        "curly": [2, "multi-line"],
        "dot-location": [2, "property"],
        "eol-last": 2,
        "eqeqeq": ["error", "always", {"null": "ignore"}],
        "generator-star-spacing": [2, {
          "before": true,
          "after": true
        }],
        "handle-callback-err": [2, "^(err|error)$"],
        // "indent": [2, 2, {
        //   "SwitchCase": 1
        // }],
        "jsx-quotes": [2, "prefer-single"],
        "key-spacing": [2, {
          "beforeColon": false,
          "afterColon": true
        }],
        "keyword-spacing": [2, {
          "before": true,
          "after": true
        }],
        "new-cap": [2, {
          "newIsCap": true,
          "capIsNew": false
        }],
        "new-parens": 2,
        "no-array-constructor": 2,
        "no-caller": 2,
        "no-console": "off",
        "no-class-assign": 2,
        "no-cond-assign": 2,
        "no-const-assign": 2,
        "no-control-regex": 0,
        "no-delete-var": 2,
        "no-dupe-args": 2,
        "no-dupe-class-members": 2,
        "no-dupe-keys": 2,
        "no-duplicate-case": 2,
        "no-empty-character-class": 2,
        "no-empty-pattern": 2,
        "no-eval": 2,
        "no-ex-assign": 2,
        "no-extend-native": 2,
        "no-extra-bind": 2,
        "no-extra-boolean-cast": 2,
        "no-extra-parens": [2, "functions"],
        "no-fallthrough": 2,
        "no-floating-decimal": 2,
        "no-func-assign": 2,
        "no-implied-eval": 2,
        "no-inner-declarations": [2, "functions"],
        "no-invalid-regexp": 2,
        "no-irregular-whitespace": 2,
        "no-iterator": 2,
        "no-label-var": 2,
        "no-labels": [2, {
          "allowLoop": false,
          "allowSwitch": false
        }],
        "no-lone-blocks": 2,
        "no-mixed-spaces-and-tabs": 2,
        "no-multi-spaces": 2,
        "no-multi-str": 2,
        "no-multiple-empty-lines": [2, {
          "max": 1
        }],
        "no-native-reassign": 2,
        "no-negated-in-lhs": 2,
        "no-new-object": 2,
        "no-new-require": 2,
        "no-new-symbol": 2,
        "no-new-wrappers": 2,
        "no-obj-calls": 2,
        "no-octal": 2,
        "no-octal-escape": 2,
        "no-path-concat": 2,
        "no-proto": 2,
        "no-redeclare": 2,
        "no-regex-spaces": 2,
        "no-return-assign": [2, "except-parens"],
        "no-self-assign": 2,
        "no-self-compare": 2,
        "no-sequences": 2,
        "no-shadow-restricted-names": 2,
        "no-spaced-func": 2,
        "no-sparse-arrays": 2,
        "no-this-before-super": 2,
        "no-throw-literal": 2,
        "no-trailing-spaces": 2,
        "no-undef": 2,
        "no-undef-init": 2,
        "no-unexpected-multiline": 2,
        "no-unmodified-loop-condition": 2,
        "no-unneeded-ternary": [2, {
          "defaultAssignment": false
        }],
        "no-unreachable": 2,
        "no-unsafe-finally": 2,
        "no-unused-vars": [2, {
          "vars": "all",
          "args": "none"
        }],
        "no-useless-call": 2,
        "no-useless-computed-key": 2,
        "no-useless-constructor": 2,
        "no-useless-escape": 0,
        "no-whitespace-before-property": 2,
        "no-with": 2,
        "one-var": [2, {
          "initialized": "never"
        }],
        "operator-linebreak": [2, "after", {
          "overrides": {
            "?": "before",
            ":": "before"
          }
        }],
        "padded-blocks": [2, "never"],
        "quotes": [2, "single", {
          "avoidEscape": true,
          "allowTemplateLiterals": true
        }],
        "semi": [2, "always"],
        "semi-spacing": [2, {
          "before": false,
          "after": true
        }],
        "space-before-blocks": [2, "always"],
        "space-before-function-paren": [2, "never"],
        "space-in-parens": [2, "never"],
        "space-infix-ops": 2,
        "space-unary-ops": [2, {
          "words": true,
          "nonwords": false
        }],
        "spaced-comment": [2, "always", {
          "markers": ["global", "globals", "eslint", "eslint-disable", "*package", "!", ","]
        }],
        "template-curly-spacing": [2, "never"],
        "use-isnan": 2,
        "valid-typeof": 2,
        "wrap-iife": [2, "any"],
        "yield-star-spacing": [2, "both"],
        "yoda": [2, "never"],
        "prefer-const": 2,
        "no-debugger":  2 ,
        "object-curly-spacing": [2, "always", {
          "objectsInObjects": false
        }],
        "array-bracket-spacing": [2, "never"],
        "@typescript-eslint/array-type": ["warn", { "default" : "generic"}],
		"@typescript-eslint/await-thenable": "warn",
		"@typescript-eslint/ban-ts-ignore": "off",
		// "brace-style": "off",
		"@typescript-eslint/brace-style": ["warn", "1tbs"],
		// "camelcase": "off",
		// "@typescript-eslint/camelcase": ["warn", {"properties": "never"}],
		"@typescript-eslint/explicit-function-return-type": "off", // should probably be on
		"@typescript-eslint/explicit-member-accessibility": "off",
    "indent": ["error", 2],
		"@typescript-eslint/indent": ["warn", 2, {"SwitchCase": 1}],
		"@typescript-eslint/member-delimiter-style": ["warn",
			{
				"singleline": {
					"delimiter": "comma",
					"requireLast": false
				},
				"multiline": {
					"delimiter": "comma",
					"requireLast": true
				}
			}
		],
		"@typescript-eslint/no-empty-function": "off",
		"@typescript-eslint/no-explicit-any": "off",
		// "no-extra-parens": "off",
		"@typescript-eslint/no-extra-parens": "warn",
		"@typescript-eslint/no-extraneous-class": "warn",
		"@typescript-eslint/no-for-in-array": "warn",
		"@typescript-eslint/no-inferrable-types": ["warn", {"ignoreParameters": true}],
		"@typescript-eslint/no-misused-promises": "off",
		// "no-unused-vars": "off",
		"@typescript-eslint/no-unused-vars": "warn",
		"@typescript-eslint/no-unnecessary-qualifier": "warn",
		"@typescript-eslint/no-unnecessary-type-assertion": "warn",
		"@typescript-eslint/no-useless-constructor": "warn",
		"@typescript-eslint/no-require-imports": "warn",
		"@typescript-eslint/no-this-alias": [
			"warn",
			{
				"allowDestructuring": true,
				"allowedNames": ["that"]
			}
		],
		"@typescript-eslint/no-use-before-define": "off",
		"@typescript-eslint/prefer-function-type": "warn",
		"@typescript-eslint/prefer-includes": "off",
		"@typescript-eslint/prefer-interface": "off",
		"@typescript-eslint/prefer-string-starts-ends-with": "off",
		"@typescript-eslint/prefer-readonly": "warn",
		"@typescript-eslint/promise-function-async": "off",
		"@typescript-eslint/require-array-sort-compare": "warn",
		"@typescript-eslint/require-await": "warn",
		"@typescript-eslint/restrict-plus-operands": "off",
		"@typescript-eslint/strict-boolean-expressions": "off",
		"@typescript-eslint/unbound-method": "warn",
    },
  
    //ESLint支持在配置文件添加共享设置
    //你可以添加settings对象到配置文件，它将提供给每一个将被执行的规则
    //如果你想添加的自定义规则而且使它们可以访问到相同的信息，这将会很有用，并且很容易配置
    "settings": {
      "sharedData": "Hello"
    },
  
    //Eslint检测配置文件步骤：
    //1.在要检测的文件同一目录里寻找.eslintrc.*和package.json
    //2.紧接着在父级目录里寻找，一直到文件系统的根目录
    //3.如果在前两步发现有root：true的配置，停止在父级目录中寻找.eslintrc
    //4.如果以上步骤都没有找到，则回退到用户主目录~/.eslintrc中自定义的默认配置
    "root": true,
  
    //extends属性值可以是一个字符串或字符串数组
    //数组中每个配置项继承它前面的配置
    //可选的配置项如下
    //1.字符串eslint：recommended，该配置项启用一系列核心规则，这些规则报告一些常见问题，即在(规则页面)中打勾的规则
    //2.一个可以输出配置对象的可共享配置包，如eslint-config-standard
      //可共享配置包是一个导出配置对象的简单的npm包，包名称以eslint-config-开头，使用前要安装
      //extends属性值可以省略包名的前缀eslint-config-
    //3.一个输出配置规则的插件包，如eslint-plugin-react
      //一些插件也可以输出一个或多个命名的配置
      //extends属性值为，plugin：包名/配置名称
    //4.一个指向配置文件的相对路径或绝对路径
    //5.字符串eslint：all，启用当前安装的ESLint中所有的核心规则
      //该配置不推荐在产品中使用，因为它随着ESLint版本进行更改。使用的话，请自己承担风险
    // "extends": [
    // //   "eslint:recommended",
    // //   "standard",
    // //   "plugin:react/recommended",
    // //   "./node_modules/coding-standard/.eslintrc-es6",
    // //   "eslint:all"
    // ]
    // "extends": "standard-with-typescript",
    "extends": [
      "plugin:@typescript-eslint/recommended"
    ],

  }

